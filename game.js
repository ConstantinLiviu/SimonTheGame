// arrays to register data during game
// available options
const colors = ['green', 'red', 'yellow', 'blue'];
// the pattern that will be generated by the game as you play along
let gamePattern = [];
// the pattern generated by the player upon clicking buttons
let userPattern = [];

// starting level and start game boolean/trigger
let level = 0;
let start = true;

// GAME Start
// wait for a key to be pressed
  $(document).keypress(function(){
    if (start) {
      // disable trigger
      start = false;
      // Simon plays the first round/level
      round();
    }
  });

// If a button is clicked
$(".btn").click(function() {
  // obtain the class name which matches the color by referrencing the actual button you clicked (.btn fetches them all) using "this"
  let action = $(this).attr("id");
  // add the color to the user's choices
  userPattern.push(action);
  // button flashes when clicked
  btnFlash(action);
  // sound matching the color is played
  noise(action);
  // check user input => length-1 = last position of array = last users's choices
  // we need that number to be able to use it in array comparison in order to compare the last element of the array
  checkChoice(userPattern.length-1);
});

// make sure user's on track and game actually behaves like a game
function checkChoice(randoVar){
  // compare the last element of the array consisting of the user's choices to the matching element(index of) in the game pattern
    if (gamePattern[randoVar] === userPattern[randoVar]){
      // if the elements match on both sides (index and value)
      if(gamePattern.length === userPattern.length){
        // start a new round every time last element and array length match
        // 1.5 seconds delay for a new round start
      setTimeout(function(){
        round();
      }, 1500);
    }
    } else {
      // bask in the sound of failure
      noise("wrong");
      // turn body background color red
      $("body").addClass("game-over");
      // change header and instruct player to press any key
      $("#level-title").text("Game Over! Press any key to try again!");
      // add delay to removing the body's red background
      setTimeout(function () {
        $("body").removeClass("game-over");
      }, 200);
      // reset user/game Patterns, reset level to 0, reset game trigger/boolean so that the starting if statement can be executed once more
      restart();
    }
}

// button flashes when it's clicked
function btnFlash(action){
  $("#" + action).addClass("pressed");
  // a simple timer for the flash "animation"
  setTimeout(function () {
    $("#" + action).removeClass("pressed");
  }, 100);
}



// main game round
function round (){
  // erase user pattern for the new round
  userPattern = [];
  // advance to new level
  level++;
  // change header accordingly
  $('#level-title').text("Level " + level);
  // generate a random number to be used to select a color

  let randomNumber = Math.round(Math.random()*3);
  // the random number generated above is used as an array index number in order to match it to the color as game rules intended
  let randomColor = colors[randomNumber];
  // add color to the game pattern
  gamePattern.push(randomColor);

  // animate the button choice with a fade-in/fade-out
  $('#'+randomColor).fadeOut(200).fadeIn(200);
  // let the '80s be heard
  noise(randomColor);
}

// play sound based on the color that was generated
function noise(randomvariablebecausewhynotfuckcamelcase){
  // define audio and assign it to a var
  let sound = new Audio("sounds/"+randomvariablebecausewhynotfuckcamelcase+".mp3");
  sound.play();
}

function restart(){
  start = true;
  userPattern = [];
  gamePattern = [];
  level = 0;
}
